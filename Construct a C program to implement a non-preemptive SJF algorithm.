#include <stdio.h>

struct Process {
    int id;
    int burst_time;
};

void findWaitingTime(struct Process proc[], int n, int wait_time[]) {
    wait_time[0] = 0;
    for (int i = 1; i < n; i++) {
        wait_time[i] = wait_time[i - 1] + proc[i - 1].burst_time;
    }
}

void findTurnAroundTime(struct Process proc[], int n, int wait_time[], int turn_around_time[]) {
    for (int i = 0; i < n; i++) {
        turn_around_time[i] = proc[i].burst_time + wait_time[i];
    }
}

void findavgTime(struct Process proc[], int n) {
    int wait_time[n], turn_around_time[n];
    findWaitingTime(proc, n, wait_time);
    findTurnAroundTime(proc, n, wait_time, turn_around_time);

    printf("Process ID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\n", proc[i].id, proc[i].burst_time, wait_time[i], turn_around_time[i]);
    }
}

void sortProcesses(struct Process proc[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (proc[j].burst_time > proc[j + 1].burst_time) {
                struct Process temp = proc[j];
                proc[j] = proc[j + 1];
                proc[j + 1] = temp;
            }
        }
    }
}

int main() {
    struct Process proc[] = {{1, 6}, {2, 8}, {3, 7}, {4, 3}};
    int n = sizeof(proc) / sizeof(proc[0]);

    sortProcesses(proc, n);
    findavgTime(proc, n);

    return 0;
}
